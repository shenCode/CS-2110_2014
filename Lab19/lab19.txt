==================================================================================================================
CS2110                                             Lab #19                                             Spring 2014
==================================================================================================================

Don't hesitate to ask the TA's for help. If you are stuck on
one part, or not clear about what it's asking, feel free to
ask. Remember, we are here to help you :)

This is not a timed lab so talk with your friends, use the book, etc.

You do not have to complete all of this lab, but please do as much as you can.


Part I - Copying
----------------
1.  Examine the following structure:

typedef struct
{
    int x;
    char* y;
} something;


Examine this function that copies this structure into the dest parameter

void copy_struct(const something* src, something* dest)
{
    *dest = *src;
}

void main(void)
{
    something a, b;
    a.x = 32;
    a.y = malloc(sizeof(char) * 6);
    a.y[0] = 'H';
    a.y[1] = 'E';
    a.y[2] = 'L';
    a.y[3] = 'L';
    a.y[4] = 'O';
    a.y[5] = '\0';


    copy_struct(&a, &b);
    printf("a.x = %d, a.y = %s, b.x = %d, b.y = %s\n", a.x, a.y, b.x, b.y);
    a.x = 27;
    a.y[0] = 'J';
    printf("a.x = %d, a.y = %s, b.x = %d, b.y = %s\n", a.x, a.y, b.x, b.y);
}


a. Note that there is a problem with this code. Explain what the problem is. What gets printed out?  Explain why in your own words.

b. Now your boss walks in pissed and gives you 30 minutes to fix the above problem or you will be immediately terminated.  
   Change only the copy_struct function so that the problem in the above code does not happen!  GOGOGO!

c. Suppose if the "something" structure was changed to be the following

typedef struct
{
    int x;
    char y[6];
} something;

and the line 

  a.y = malloc(sizeof(char) * 6);

was removed, and the copy_struct function was the same as in part a.

Now tell me what gets printed out and why in your own words.


d.  Now explain the terms "shallow copy" and "deep copy" in terms of parts a and b.


Part II - sizeof
----------------
What is the sizeof each of these things?  Quickly! Do not use the book or a TA tell me what (you think) the sizes of these things are.

1. char
2. short
3. int
4. long
5. char*
6. int*
7. void*
8. int**
9. this structure struct p {char a; char b;};
10. this structure struct p {short p; char a; int b;};

Now write a C program (named sizeof.c) that tells us the size of each of these using the sizeof keyword and the printf function.
How many of these did you get right?

Why shouldn't you hardcode the sizes of the variable types?


Part III - QSort
----------------
QSort is a nifty little function in C.  It sorts an array of things!

look it up in the man pages by typing man qsort in a terminal.

here is the prototype for qsort.

void qsort(void *base, size_t nmemb, size_t size, int(*compar)(const void *, const void *));

How would you use qsort to sort an array of integers from greatest to smallest?

How would you use qsort to sort an array of *pointers* to integers from greatest to smallest?

Write code that demonstrates this in a new file named fp.c

Part IV - Linked Lists
-----------------------
A linked list is being used to keep track of a list of POINT 
    structures.

    The linked list node struct looks like this:

    typedef struct node
    {
        void *data;
        struct node *next;
    } NODE;
    
    sizeof(NODE) => 8

    The point struct looks like this:

    typedef struct 
    {
        int x;
        int y;
    } POINT;
    
    sizeof(POINT) => 8

    The pointer to the head of the list:

    NODE *head;

    is located at address 1000.

    On this machine ints and pointers are 4 bytes long.

    At the moment every node in the linked list has a data pointer 
    that is pointing to a POINT struct

    Here is a snapshot of memory:
    (Note: The machine is byte addressed but we are just showing 
    memory as 4 bytes words whose addresses are multiples of 4)
     
     All numbers are decimal (base 10 numbers)
     
     1000: 1040 
     1004: 1048 
     1008: 1028 
     1012: 0777 
     1016: 0385 
     1020: 6000 
     1024: 5000 
     1028: 1012 
     1032: 0000 
     1036: 0654
     1040: 1060 
     1044: 1068 
     1048: 0027 
     1052: 0285 
     1056: 0409
     1060: 0042 
     1064: 0038 
     1068: 1020 
     1072: 1004 
     
     Draw a diagram of the linked list and all other associated data
     structures (i.e. the POINT structures)
     
     The diagram should be simply boxes with either numbers inside or 
     arrows pointing to other boxes.  I don't care if your ASCII art is not great!


Put your answers in this file and rename it to lab18.txt and submit this along with any C files I told you to create.
